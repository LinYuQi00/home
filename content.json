{"meta":{"title":"Alan","subtitle":"个人技术博客","description":"js","author":"mr.jiang","url":"http://yoursite.com"},"pages":[{"title":"Tags","date":"2017-12-29T02:15:40.000Z","updated":"2018-01-02T02:07:20.329Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-12-29T02:16:50.000Z","updated":"2018-01-02T01:46:46.326Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot入门","slug":"SpringBoot入门","date":"2018-01-09T01:35:46.000Z","updated":"2018-01-24T08:14:30.501Z","comments":true,"path":"2018/01/09/SpringBoot入门/","link":"","permalink":"http://yoursite.com/2018/01/09/SpringBoot入门/","excerpt":"","text":"Spring Boot要点 Spring将很多魔法带入了Spring应用程序的开发之中，其中最重要的是以下四个核心。 自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置 起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。 命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。 Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。 初始化Spring Boot项目 构建一个Sping Boot的Maven项目，强烈推荐Spring Initializr,它从本质上来说就是一个Web应用程序，它能为你生成Spring Boot项目结构。 Spring Initializr有几种用法： 1.通过IntelliJ IDEA使用(强烈推荐) IntelliJ IDEA是非常流行的IDE，IntelliJ IDEA 14.1已经支持Spring Boot了。创建Spring Boot操作步骤如下： 在File菜单里面选择 New &gt; Project,然后选择Spring Initializr，接着如下图一步步操作即可。 2.通过Web界面使用2.1 访问：http://start.spring.io/2.2 选择构建工具Maven Project、Spring Boot版本1.5.1以及一些工程基本信息，可参考下图所示 2.3 点击Generate Project下载项目压缩包2.4 导入到你的工程，如果是IDEA，则需要：a. 菜单中选择File–&gt;New–&gt;Project from Existing Sources…b. 选择解压后的项目文件夹，点击OKc. 点击Import project from external model并选择Maven，点击Next到底为止d. 若你的环境有多个版本的JDK，注意到选择Java SDK的版本 项目结构根据上面的操作已经初始化了一个Spring Boot的框架了，项目结构如下： 如你所见，项目里面基本没有代码，除了几个空目录外，还包含如下几样东西。 pom.xml：Maven构建说明文件。 DemoApplication.java：一个带有main()方法的类，用于启动应用程序（关键）。 DemoApplicationTests.java：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。 application.properties：一个空的properties文件，你可以根据需要添加配置属性。 解析pom.xml Spring Boot父级依赖 Spring Boot Maven插件 应用入口类 DemoApplication是一个很关键的启动类，程序的入口就是这里,为了演示简单，我们不再新建控制类，而是直接在这个入口类中编写，添加@RestController以及index方法，如下： @SpringBootApplication是Sprnig Boot项目的核心注解，主要目的是开启自动配置。 main方法这是一个标准的Java应用的main的方法，主要作用是作为项目启动的入口。 @RestController注解等价于@Controller+@ResponseBody的结合，使用这个注解的类里面的方法都以json格式输出。 启动项目的三种方式： DemoApplication的main方法 使用命令 mvn spring-boot:run”在命令行启动该应用，IDEA中该命令在如下位置： 运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“java -jar”命令就可以直接运行。 打开浏览器访问http://localhost:8080, 你就能看到页面显示Hello Spring Boot效果了。","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://yoursite.com/tags/spring/"},{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"}]},{"title":"markdown常用语法","slug":"markdown常用语法","date":"2017-12-28T10:26:04.000Z","updated":"2018-01-02T02:19:01.838Z","comments":true,"path":"2017/12/28/markdown常用语法/","link":"","permalink":"http://yoursite.com/2017/12/28/markdown常用语法/","excerpt":"","text":"简介 Markdown 的目标是实现「易读易写」。Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。同时，Markdown支持嵌入html标签。可读性，无论如何，都是最重要的。Markdown 语法受到一些既有 text-to-HTML 格式的影响，而最大灵感来源其实是纯文本电子邮件的格式。注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上 至少1个 空格才有效！ 标题 在 标题开头 加上1~6个#，依次代表一级标题、二级标题….六级标题 强调 两个或-代表加粗，一个或-代表斜体，代表删除加粗文本 或者 加粗文本斜体文本 或者斜体文本~~删除文本 列表 Markdown 支持有序列表和无序列表。1.1 无序列表使用-、+和*作为列表标记： 666666 111111 999999 1.2 有序列表则使用数字加英文句点.来表示：1.0.12.0.13.0.1 引用 引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。一级引用 二级引用 三级引用 图片与链接 图片与链接的语法很像，区别在一个 ! 号。二者格式：图片： 链接： 链接文本 代码代码分为行内代码和代码块。行内代码使用 代码 标识，可嵌入文字中代码块使用4个空格或```标识 脚注(注解)使用[^]来定义脚注：这是一个脚注的例子[^1][^1]: 这里是脚注 分隔线 在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。","categories":[],"tags":[{"name":"day-to-day","slug":"day-to-day","permalink":"http://yoursite.com/tags/day-to-day/"}]},{"title":"快速、简洁且高效的博客框架 [Hexo]","slug":"hexo基本命令","date":"2017-12-28T09:26:04.000Z","updated":"2018-01-02T02:18:53.945Z","comments":true,"path":"2017/12/28/hexo基本命令/","link":"","permalink":"http://yoursite.com/2017/12/28/hexo基本命令/","excerpt":"","text":"中文社区 Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。Hexo 支持 GitHub Flavored Markdown 的所有功能。More info: https://hexo.io/zh-cn/docs/ 命令12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server More info: https://hexo.io/zh-cn/docs/commands.html 新建文章(hexo new)1$ hexo new [layout] &lt;title&gt; 可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。More info: https://hexo.io/zh-cn/docs/writing.html 服务器(hexo-server)123$ npm install hexo-server --save$ hexo server$ hexo server -p 5000 安装完成后，输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。More info: https://hexo.io/zh-cn/docs/server.html 生成静态文件(Generating)123$ hexo generate或$ hexo g More info: https://hexo.io/zh-cn/docs/generating.html 一键部署(Deployment)123$ hexo deploy或$ hexo d More info: https://hexo.io/zh-cn/docs/deployment.html","categories":[],"tags":[{"name":"day-to-day","slug":"day-to-day","permalink":"http://yoursite.com/tags/day-to-day/"}]},{"title":"vue","slug":"vue","date":"2017-09-09T08:43:52.000Z","updated":"2018-01-02T08:53:47.722Z","comments":true,"path":"2017/09/09/vue/","link":"","permalink":"http://yoursite.com/2017/09/09/vue/","excerpt":"","text":"vuejs vue是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 中文官网: https://cn.vuejs.org/v2/guide/ github: https://github.com/vuejs/vue vue ui组件库iview https://www.iviewui.com/ eleme http://element.eleme.io/#/ 移动端ui库 http://www.muse-ui.org/#/usage http://mint-ui.github.io/docs/#/zh-cn https://vux.li/#/?id=%E7%AE%80%E4%BB%8B","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"前端构建工具","slug":"前端构建工具","date":"2017-09-01T05:23:01.000Z","updated":"2018-01-02T08:36:37.637Z","comments":true,"path":"2017/09/01/前端构建工具/","link":"","permalink":"http://yoursite.com/2017/09/01/前端构建工具/","excerpt":"","text":"为何要用构建工具？ 一句话：自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作 grunt Grunt生态系统非常庞大，并且一直在增长。由于拥有数量庞大的插件可供选择，因此，你可以利用Grunt自动完成任何事，并且花费最少的代价。如果找不到你所需要的插件，那就自己动手创造一个Grunt插件，然后将其发布到npm上吧。 http://www.gruntjs.net/getting-started gulp 用自动化构建工具增强你的工作流程！ https://www.gulpjs.com.cn/docs/api/ webpack 让一切变得简单。本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。 https://doc.webpack-china.org/concepts/","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"前端构建工具","slug":"前端构建工具","permalink":"http://yoursite.com/tags/前端构建工具/"}]},{"title":"html5","slug":"html5","date":"2017-08-18T09:06:37.000Z","updated":"2018-01-02T09:36:16.255Z","comments":true,"path":"2017/08/18/html5/","link":"","permalink":"http://yoursite.com/2017/08/18/html5/","excerpt":"","text":"html5 2012年12月17日，万维网联盟（W3C）正式宣布凝结了大量网络工作者心血的HTML5规范已经正式定稿。根据W3C的发言稿称：“HTML5是开放的Web网络平台的奠基石。”包括HTML和XHTML的标签，相关的API、Canvas等，同时HTML5的图像img标签及svg也进行了改进，性能得到进一步提升。支持Html5的浏览器包括Firefox（火狐浏览器），IE9及其更高版本，Chrome（谷歌浏览器），Safari，Opera等；国内的傲游浏览器（Maxthon），以及基于IE或Chromium（Chrome的工程版或称实验版）所推出的360浏览器、搜狗浏览器、QQ浏览器、猎豹浏览器等国产浏览器同样具备支持HTML5的能力。 HTML5是什么？ HTML5 是 HTML标准的最新演进版本,它是一个新的 HTML 语言版本包含了新的元素，属性和行为，同时包含了一系列可以被用来让 Web 站点和应用更加多样化，功能更强大的技术。 这套技术往往被称作 HTML5 和它的朋友们，通常简称为 HTML5 有哪些新特性？ 语意特性,添加(header, nav)等标签 多媒体， 用于媒介回放的 video 和 audio 元素 图像效果，用于绘画的 canvas 元素，svg元素等 离线 &amp; 存储,对本地离线存储的更好的支持,local Store,Cookies等 设备兼容特性 ，HTML5提供了前所未有的数据与应用接入开放接口。使外部应用可以直接与浏览器内部的数据直接相连， 连接特性，更有效的连接工作效率，使得基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流得到了实现。HTML5拥有更有效的服务器推送技术，Server-Sent Event和WebSockets就是其中的两个特性，这两个特性能够帮助我们实现服务器将数据“推送”到客户端的功能 性能与集成特性，HTML5会通过XMLHttpRequest2等技术，帮助您的Web应用和网站在多样化的环境中更快速的工作 有哪些新增标签？ 多媒体：(audio, video, source, embed, track) 新表单元素：(datalist, output, keygen) 新文档节段和纲要: (header页面头部、section章节、aside边栏、article文档内容、footer页面底部、section章节、aside边栏、article文档内容、footer页面底部等) 如何让低版本的 IE 支持 HTML5新标签？ 使用html5shiv可以解决ie低版本不兼容的问题，只需要在head中加上,当版本低于IE9时，浏览器会加载html5.js脚本，使得支持html5的新功能，也可以将脚本文件下载到本地 input 有哪些新增类型？ color,选择颜色 date 选择日期 email 用于检测输入的是否为email格式的地址 month 选择月份 number 用于应该包含数值的输入域，可以设定对输入值的限定 range 用于定义一个滑动条，表示范围 search 用于搜索，比如站点搜索或 Google 搜索 tel 输入电话号码 time 选择时间 url 输入网址 week 选择周和年 浏览器本地存储中 cookie 和 localStorage 有什么区别？ localStorage 如何存储删除数据。 共同点：sessionStorage、localStorage和cookie都由浏览器存储在本地的数据。区别: cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，localStorage不会自动把数据发给服务器，仅在本地保存 cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下，存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。localStorage不会自动把数据发给服务器 cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据 localStorage支持事件通知机制，可以将数据更新的通知发送给监听者。 api 接口使用更方便。而cookie的原生接口不友好，需要程序员自己封装 HTML5中提供了localStorage对象可以将数据长期保存在客户端，除非人为清除，localStorage提供了几个方法: 存储:localStorage.setItem(key,value)如果key存在时，更新value 获取 localStorage.getItem(key)如果key不存在返回null 删除 localStorage.removeItem(key)一旦删除，key对应的数据将会全部删除 全部清除 localStorage.clear() 使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据 注意：localStorage存数的数据是不能跨浏览器共用的，一个浏览器只能读取各自浏览器的数据,储存空间5M。","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"html5","slug":"html5","permalink":"http://yoursite.com/tags/html5/"}]},{"title":"css3","slug":"css3","date":"2017-08-16T09:09:38.000Z","updated":"2018-01-02T09:21:57.310Z","comments":true,"path":"2017/08/16/css3/","link":"","permalink":"http://yoursite.com/2017/08/16/css3/","excerpt":"","text":"css3 CSS即层叠样式表（Cascading StyleSheet）。 在网页制作时采用层叠样式表技术，可以有效地对页面的布局、字体、颜色、背景和其它效果实现更加精确的控制。 http://www.phpstudy.net/css3/","categories":[],"tags":[{"name":"css3","slug":"css3","permalink":"http://yoursite.com/tags/css3/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"webpack详解","slug":"webpack详解","date":"2017-08-02T03:27:23.000Z","updated":"2018-01-02T08:30:30.853Z","comments":true,"path":"2017/08/02/webpack详解/","link":"","permalink":"http://yoursite.com/2017/08/02/webpack详解/","excerpt":"","text":"为什么使用webpack？ 拆包–&gt;允许按需加载 Plugin–&gt;适应大型项目 Loader–&gt;定制资源包 webpack核心概念–ModuleModule模块 js css，font，images… 函数写法：var mod1 = function() {}; 对象写法：var mod2 = { init： function() {}}; 立即执行函数：var mod3 = (function(win) {})(window); webpack核心概念–ChunkChunk块Many small modules combinedEntry Chunk，Output Chunk，Common Chunk webpack核心概念–定位Module Loader（模块加载器）Module bundler（模块打包工具） browserify webpack 特点： 浏览器中加载入口及依赖 执行入口及依赖代码 分析及合成模块系统 生成文件束（bundle/chunk） webpack配置 entry：源文件 output：生成文件 loader：编译文件 plugins：插件 resolve：文件路径指向 编译资源 将源文件编译成浏览器能识别的代码： es6–&gt;es5 image–&gt;base64 sass/less–&gt;css etc… 提高构建速度 将大型库外链 将库预先编译 减少构建搜索或编译路径 缓存 并行","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"emmet","slug":"emmet","date":"2017-07-20T05:51:30.000Z","updated":"2018-01-02T08:27:58.343Z","comments":true,"path":"2017/07/20/emmet/","link":"","permalink":"http://yoursite.com/2017/07/20/emmet/","excerpt":"","text":"介绍 Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具.Emmet把片段这个概念提高到了一个新的层次：你可以设置CSS形式的能够动态被解析的表达式，然后根据你所输入的缩写来得到相应的内容。Emmet是很成熟的并且非常适用于编写HTML/XML 和 CSS 代码的前端开发人员，但也可以用于编程语言. https://www.w3cplus.com/tools/emmet-cheat-sheet.html 语法后代：> 缩写：nav&gt;ul&gt;li 兄弟：+ 缩写：div+p+bq 上级：^ 缩写：div+div&gt;p&gt;span+em^bq 分组：() 缩写：(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p 乘法：* 缩写：ul&gt;li* 自增符号：$ 缩写：ul&gt;li.item$*5 ID和类属性 缩写：#header缩写: .class 自定义属性 缩写：p[title=”Hello world”] 文本：{} 缩写：a{Click me} HTML 缩写：! 标签 a、p、span、img、input、btn","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"emmet","slug":"emmet","permalink":"http://yoursite.com/tags/emmet/"}]},{"title":"ps切图就这么简单","slug":"ps切图就这么简单","date":"2017-07-12T02:27:52.000Z","updated":"2018-01-24T08:13:08.022Z","comments":true,"path":"2017/07/12/ps切图就这么简单/","link":"","permalink":"http://yoursite.com/2017/07/12/ps切图就这么简单/","excerpt":"","text":"photoshop界面设置新建设置（ctrl+n） 预览：自定义 分辨率：72像素/英寸 颜色模式：RGB颜色 8位 背景内容：透明 新建图层ctrl+shift+n 移动工具（v） 自动选择：图层 按住ctrl键，在图层上单击鼠标左键，定位到选中的图层 视图设置 视图 - 显示 - 智能参考线 标尺（ctrl+r） 窗口（图层、历史记录、信息、字符） 信息选项-模式：RGB颜色 - 标尺单位：像素 - 文档尺寸 编辑 - 首选项 - 单位与标尺：像素 窗口 - 工作区 - 新建工作区 photoshop简单工具操作选区图层选取工具（m） 填充 选取四大属性 切换shift+m，alt 变换shift 套索工具（l）快速选择工具(w) 删除选取ctrl+d 裁剪工具（c） 自动选择，按ctrl选择选区 吸管工具（i）-吸取颜色 画笔工具（b）仿制图章工具（s）历史记录画笔工具（y）橡皮擦工具（e）渐变工具（g）钢笔工具（p） 点击滑动，小角可以拉动 路径：工作区域 ctrl+鼠标左键选区 横排文字工具（p）矩形工具（u） 前景色填充（alt+del） 背景色填充（ctrl+del） 右键-变换选区 - shirt+alt - ent - del 自由变化（ctrl+t），按住shift 复制按住alt 视图（v） 标尺（ctrl+r） 参考线（alt+v+e），关闭（ctrl+；） ps切图切片工具（c） 切换（shift+c） 调整（alt） 参考线-切片 基于参考线的切片 存储web（crtl+alt+shift+s）保存 自动切图文件-脚本-将图层导出到文件cc： 编辑-首选项-增效工具-启用生成器 文件-图片资源 复制css：图层-复制css","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"webUI","slug":"webUI","date":"2017-07-10T03:11:49.000Z","updated":"2018-01-02T08:31:45.187Z","comments":true,"path":"2017/07/10/webUI/","link":"","permalink":"http://yoursite.com/2017/07/10/webUI/","excerpt":"","text":"WEB-UI是什么？ UI本意是用户界面，是英文User Interface的缩写，是用户与界面的交互关系。方向：用户研究、交互设计、界面设计。 功能为主 用户为主 屏幕分辨率 以水平和垂直像素来衡量 iMac分辨率： 21寸19201080 &amp; Retina 4K 40962304 27寸 Retina 5K 5120*2880 ios手机： 4s 3.5寸 960*640 5s 4.0寸 1136*640 6 4.7寸 1334*750 6s 5.5寸 1920*1080 PC： 19寸 1440*900 20寸 1600*900 21.5寸 1920*1080 22寸 1680*1050 显示器屏幕长宽比： 5:4 = 1.25 4:3 = 1.33 16:10 = 1.60 16:9 = 1.77 常见显示器屏幕分辨率：宽高比1.25 800*640 1280*1024 宽高比1.33 800*600 1280*960 1024*768 1400*1050 1600*1200 2048*1536 宽高比1.60 1280*800 1440*900 1680*1050 1920*1200 宽高比1.77 1280*720 1440*810 1680*945 1920*1080","categories":[],"tags":[{"name":"UI","slug":"UI","permalink":"http://yoursite.com/tags/UI/"}]},{"title":"UI设计","slug":"UI设计","date":"2017-07-10T02:54:33.000Z","updated":"2018-01-02T08:31:51.101Z","comments":true,"path":"2017/07/10/UI设计/","link":"","permalink":"http://yoursite.com/2017/07/10/UI设计/","excerpt":"","text":"界面设计流程 需求-策划-原型图-设计图-制作-上线发布 三大部分：版式-制作-输出版式： 分析需求内容 绘制草图 制作： 优化版式结构 填充内容 样式设计 输出： 优化 切图 输出 设计规范 色彩规范 文字规范 图标规范 控件规范 web设计 设计纬度：版式、色彩、图片、字体、段落、细节 界面设计流程 基本规范：设计规范 字体选择： 使用通用字体的样式属性 使用在线字体 色彩运用：色相、明度、纯度色彩三要素（对比色、互补色、同类色） 尺寸单位：px，pt 1pt=1/72英寸、PPI（DPI）、em 图像格式：JPG、GIF、PNG 视觉层次：透视、景深、元素层次、色彩层次 切图：ps 首页设计：登录/不登录 专题设计： 结构 风格 头图 内容 创意 版式 色彩 细节 banner设计： 需求 风格 版式 配色 听说读写 听：多收集、行业信息、发展趋势说：与人交流、同行、用户读：生活中、多观摩分析、别人作品写：着手练习、临摹、优化","categories":[],"tags":[{"name":"UI","slug":"UI","permalink":"http://yoursite.com/tags/UI/"}]},{"title":"web前端工具","slug":"web前端工具","date":"2017-07-07T08:26:56.000Z","updated":"2018-01-02T08:31:23.272Z","comments":true,"path":"2017/07/07/web前端工具/","link":"","permalink":"http://yoursite.com/2017/07/07/web前端工具/","excerpt":"","text":"nodejs环境1.下载地址： 中文文档-http://nodejs.cn/ 英文文档-https://nodejs.org/en/ 2.安装步骤： 1）下载nodejs安装包，傻瓜式安装； 2）检查是否安装成功： 在命令窗口输入 node -v 3）安装成功nodejs自带npm包：npm -v webpack介绍概念:webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成少量的 bundle - 通常只有一个，由浏览器加载。 它是高度可配置的，但是，在开始前你需要先理解四个核心概念：入口(entry)、输出(output)、loader、插件(plugins)。 文档地址： 中文文档：https://doc.webpack-china.org/ 英文文档： http://webpack.github.io/docs/ 2.安装webpack npm安装webpack： npm install webpack -g 本机全局安装 是否安装成功：webpack -v 淘宝镜像 使用说明 你可以使用我们定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm: npm install -g cnpm –registry=https://registry.npm.taobao.org 文档地址：http://npm.taobao.org/ nrm – NPM registry 管理工具开发的npm registry 管理工具 nrm, 能够查看和切换当前使用的registry, 最近NPM经常 down 掉, 这个还是很有用的哈哈 安装 npm install nrm -g 文档地址：http://cnodejs.org/topic/5326e78c434e04172c006826 git安装 在 Windows 上安装 在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行： http://msysgit.github.com/完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。 克隆项目：git clone git://git.kernel.org/pub/scm/git/git.git 编辑器(IDE) sublime text编辑器 下载地址：http://www.sublimetext.com/3 Sublime Text 3 3126 注册码 测试通过： —– BEGIN LICENSE —–Michael BarnesSingle User LicenseEA7E-8213858A353C41 872A0D5C DF9B2950 AFF6F667C458EA6D 8EA3C286 98D1D650 131A97ABAA919AEC EF20E143 B361B1E7 4C8B7F04B085E65E 2F5F5360 8489D422 FB8FC1AA93F6323C FD7F7544 3F39C318 D95E6480FCCC7561 8A4A1741 68FA4223 ADCEDE07200C25BE DBBC4855 C4CFB774 C5EC138C0FEC1CEF D9DCECEC D3A5DAD1 01316C36—— END LICENSE —— HBuilder编辑器http://www.dcloud.io/ webstorm编辑器https://www.jetbrains.com/webstorm/ visualstudio 编辑器https://code.visualstudio.com/","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"git","slug":"git","date":"2017-06-01T06:17:36.000Z","updated":"2018-01-02T08:27:37.382Z","comments":true,"path":"2017/06/01/git/","link":"","permalink":"http://yoursite.com/2017/06/01/git/","excerpt":"","text":"git Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 http://git.oschina.net/progit/index.html git工具 sourcetree https://www.sourcetreeapp.com/ tortoisegit https://tortoisegit.org/ git常用命令专用名词 Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 新建 新建一个目录，将其初始化为Git代码库$ git init [project-name] 下载一个项目和它的整个代码历史$ git clone [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 显示当前的Git配置$ git config –list 编辑Git配置文件$ git config -e [–global] 设置提交代码时的用户信息$ git config [–global] user.name “[name]”$ git config [–global] user.email “[email address]” 增加/删除文件 添加指定文件到暂存区$ git add [file1] [file2] … 对于同一个文件的多处变化，可以实现分次提交$ git add -p 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] … 停止追踪指定文件，但该文件会保留在工作区$ git rm –cached [file] 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交 提交暂存区到仓库区$ git commit -m [message] 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a 提交时显示所有diff信息$ git commit -v 分支 列出所有本地分支$ git branch 列出所有远程分支$ git branch -r 列出所有本地分支和远程分支$ git branch -a 新建一个分支，但依然停留在当前分支$ git branch [branch-name] 新建一个分支，并切换到该分支$ git checkout -b [branch] 标签 列出所有tag$ git tag 新建一个tag在当前commit$ git tag [tag] 新建一个tag在指定commit$ git tag [tag] [commit] 删除本地tag$ git tag -d [tag] 删除远程tag$ git push origin :refs/tags/[tagName] 查看tag信息$ git show [tag] 提交指定tag$ git push [remote] [tag] 提交所有tag$ git push [remote] –tags 查看信息 显示有变更的文件$ git status 显示当前分支的版本历史$ git log 显示commit历史，以及每次commit发生变更的文件$ git log –stat 搜索提交历史，根据关键词$ git log -S [keyword] 显示某个文件的版本历史，包括文件改名$ git log –follow [file]$ git whatchanged [file] 显示指定文件相关的每一次diff$ git log -p [file] 显示两次提交之间的差异$ git diff [first-branch]…[second-branch] 显示今天你写了多少行代码$ git diff –shortstat “@{0 day ago}” 显示某次提交的元数据和内容变化$ git show [commit] 显示某次提交发生变化的文件$ git show –name-only [commit] 显示某次提交时，某个文件的内容$ git show [commit]:[filename] 显示当前分支的最近几次提交$ git reflog 远程同步 下载远程仓库的所有变动$ git fetch [remote] 显示所有远程仓库$ git remote -v 显示某个远程仓库的信息$ git remote show [remote] 增加一个新的远程仓库，并命名$ git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch] 上传本地指定分支到远程仓库$ git push [remote] [branch] 推送所有分支到远程仓库$ git push [remote] –all 撤销 恢复暂存区的指定文件到工作区$ git checkout [file] 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file] 恢复暂存区的所有文件到工作区$ git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file] 重置暂存区与工作区，与上一次commit保持一致$ git reset –hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset –hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset –keep [commit]","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"koa2","slug":"koa2","date":"2017-05-18T08:19:36.000Z","updated":"2018-01-02T08:27:14.848Z","comments":true,"path":"2017/05/18/koa2/","link":"","permalink":"http://yoursite.com/2017/05/18/koa2/","excerpt":"","text":"koa2入门 https://cnodejs.org/topic/5709959abc564eaf3c6a48c8 koa2中文官网 koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套， 并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件， 它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。 https://koa.bootcss.com/ 安装 Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持.你可以使用自己喜欢的版本管理器快速安装支持的 node 版本：$ nvm install 7$ npm i koa$ node my-koa-app.js","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"},{"name":"koa2","slug":"koa2","permalink":"http://yoursite.com/tags/koa2/"}]},{"title":"express","slug":"express","date":"2017-05-10T08:15:15.000Z","updated":"2018-01-02T08:27:04.256Z","comments":true,"path":"2017/05/10/express/","link":"","permalink":"http://yoursite.com/2017/05/10/express/","excerpt":"","text":"express http://www.expressjs.com.cn/guide/routing.html 安装 首先假定你已经安装了 Node.js，接下来为你的应用创建一个目录，然后进入此目录并将其作为当前工作目录。$ mkdir myapp$ cd myapp 通过 npm init 命令为你的应用创建一个 package.json 文件。 欲了解 package.json 是如何起作用的，请参考 Specifics of npm’s package.json handling。$ npm init 此命令将要求你输入几个参数，例如此应用的名称和版本。 你可以直接按“回车”键接受默认设置即可，下面这个除外：entry point: (index.js) 键入 app.js 或者你所希望的名称，这是当前应用的入口文件。如果你希望采用默认的 index.js 文件名，只需按“回车”键即可。 接下来安装 Express 并将其保存到依赖列表中：$ npm install express –save 如果只是临时安装 Express，不想将它添加到依赖列表中，只需略去 –save 参数即可：$ npm install express","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"},{"name":"express","slug":"express","permalink":"http://yoursite.com/tags/express/"}]},{"title":"js","slug":"js","date":"2017-05-02T07:41:28.000Z","updated":"2018-01-02T08:28:28.210Z","comments":true,"path":"2017/05/02/js/","link":"","permalink":"http://yoursite.com/2017/05/02/js/","excerpt":"","text":"什么是JavaScript？ JavaScript（缩写：JS）是一门成熟的动态编程语言，当应用于HTML文档时，可以在网站上提供动态交互性。它是Mozilla项目联合创始人，Mozilla基金会和Mozilla公司的Brendan Eich发明的。 https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics http://www.ruanyifeng.com/blog/javascript/ http://javascript.ruanyifeng.com/#introduction https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000 http://liubin.org/promises-book/ http://www.aseoe.com/manual/js/ http://www1.qdfuns.com/feres.php?do=picture&amp;listtype=book","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"day-to-day","slug":"day-to-day","permalink":"http://yoursite.com/tags/day-to-day/"}]},{"title":"NodeJS","slug":"NodeJS","date":"2017-05-01T07:57:33.000Z","updated":"2018-01-02T08:26:47.710Z","comments":true,"path":"2017/05/01/NodeJS/","link":"","permalink":"http://yoursite.com/2017/05/01/NodeJS/","excerpt":"","text":"nodejs Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。 nodejs中文官网：http://nodejs.cn/ nodejs社区：https://cnodejs.org/ 快速入门： http://nqdeng.github.io/7-days-nodejs/#1.1 利用n和nvm管理Node的版本n n是Node的一个模块，作者是TJ Holowaychuk（鼎鼎大名的Express框架作者），就像它的名字一样，它的理念就是简单. 安装很简单： $ sudo npm install -g n 安装完成之后，直接输入n后输出当前已经安装的node版本以及正在使用的版本（前面有一个o），你可以通过移动上下方向键来选择要使用的版本，最后按回车生效。$ n 6.08.1o 6.10.2 安装最新的版本$ n latest 安装稳定版本$ n stable 删除某个版本$ n rm 0.10.1 nvm nvm全称Node Version Manager，它与n的实现方式不同，其是通过shell脚本实现的。 安装方式有两种：$ curl https://raw.github.com/creationix/nvm/v0.4.0/install.sh | sh或者$ wget -qO- https://raw.github.com/creationix/nvm/v0.4.0/install.sh | sh 使用指定的版本$ nvm use 6.10.2 查看当前已经安装的版本$ nvm ls.nvm-&gt; v6.10.2 查看正在使用的版本$ nvm currentv6.10.2 卸载nvm$ rm -rf ~/.nvm","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"}]}]}